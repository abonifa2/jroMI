{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red133\green0\blue175;\red164\green8\blue0;}
\margl1440\margr1440\vieww20280\viewh13600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs28 \cf2 \
\
1.
\b0 \cf0  Here are the results regarding measuring the process time of the modules of covXYs :\
\
When covXYs.py (note that it is run for 1 pair of tx,ty defined under _main_) is run;\
\
* CPU time results (differential time has been measured using 
\b time.clock 
\b0 for each module);\
\
1.00000000001e-05 seconds process time for the module 'geom' \
5.99999999995e-06 seconds process time for the module 'covs' \
\
* detailed results obtained by profiling (
\b cProfile 
\b0 has been used);\
\
\cf3 MODULE 'GEOM'\cf0 \
\
        14653 function calls in 0.216 seconds\
\
   Ordered by: standard name\
\
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\
        1    0.000    0.000    0.216    0.216 <string>:1(<module>)\
      200    0.004    0.000    0.014    0.000 basic.py:524(lpmn)\
        1    0.044    0.044    0.216    0.216 covXYs.py:63(geom)\
      600    0.002    0.000    0.008    0.000 fromnumeric.py:1379(sum)\
      200    0.092    0.000    0.115    0.001 igrf11.py:23(igrf_B)\
      802    0.014    0.000    0.022    0.000 linalg.py:1840(norm)\
      604    0.014    0.000    0.029    0.000 numeric.py:1128(cross)\
      600    0.005    0.000    0.006    0.000 numeric.py:1574(isscalar)\
     2010    0.003    0.000    0.007    0.000 numeric.py:167(asarray)\
      200    0.001    0.000    0.001    0.000 numeric.py:237(asanyarray)\
      200    0.002    0.000    0.004    0.000 type_check.py:170(iscomplex)\
      200    0.000    0.000    0.000    0.000 \{abs\}\
     1200    0.002    0.000    0.002    0.000 \{isinstance\}\
      200    0.000    0.000    0.000    0.000 \{issubclass\}\
      802    0.001    0.000    0.001    0.000 \{method 'conj' of 'numpy.ndarray' objects\}\
        1    0.000    0.000    0.000    0.000 \{method 'disable' of '_lsprof.Profiler' objects\}\
      802    0.001    0.000    0.001    0.000 \{method 'ravel' of 'numpy.ndarray' objects\}\
      802    0.004    0.000    0.004    0.000 \{method 'reduce' of 'numpy.ufunc' objects\}\
      600    0.006    0.000    0.006    0.000 \{method 'sum' of 'numpy.ndarray' objects\}\
     1208    0.001    0.000    0.001    0.000 \{method 'swapaxes' of 'numpy.ndarray' objects\}\
      200    0.001    0.000    0.001    0.000 \{numpy.core._dotblas.dot\}\
     3019    0.019    0.000    0.019    0.000 \{numpy.core.multiarray.array\}\
      200    0.001    0.000    0.001    0.000 \{numpy.core.multiarray.zeros\}\
        1    0.000    0.000    0.000    0.000 \{range\}\
\
\cf3 MODULE 'COVS'\cf0 \
\
        2408 function calls in 0.024 seconds\
\
   Ordered by: standard name\
\
   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\
        1    0.000    0.000    0.024    0.024 <string>:1(<module>)\
        1    0.009    0.009    0.024    0.024 covXYs.py:113(covs)\
        1    0.000    0.000    0.000    0.000 numeric.py:1830(identity)\
      400    0.000    0.000    0.000    0.000 \{abs\}\
        1    0.000    0.000    0.000    0.000 \{method 'disable' of '_lsprof.Profiler' objects\}\
     1600    0.006    0.000    0.006    0.000 \{numpy.core._dotblas.dot\}\
      402    0.009    0.000    0.009    0.000 \{numpy.core.multiarray.array\}\
        1    0.000    0.000    0.000    0.000 \{numpy.core.multiarray.zeros\}\
        1    0.000    0.000    0.000    0.000 \{range\}\
\
As seen above, it takes more time to process module "geom " than module "covs". Basically, what "covs" does is all arithmetic calculations. On the other hand, geom carries out more complicated tasks. Most of the processing time is consumed on calling module "igrf_B" from igrf11.py as seen above in profiling results. Since magnetic field vector components should be determined locally (i.e. inside the loop for each slab), this function can`t be taken out of the loop. \
\
Hence, I believe we do not need to do any performance improvement in this module.\
\
}